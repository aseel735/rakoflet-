name: Build APK Mobile App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  FLUTTER_VERSION: "3.16.5"

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flet
        
    - name: Build Flet APK
      run: |
        # Build the APK using Flet
        flet build apk \
          --project "Multi-Berth Port Ship Service Planner" \
          --description "Port management and ship scheduling system" \
          --org "com.aseelqasem.portplanner" \
          --template-dir "build_template" \
          --build-number ${{ github.run_number }} \
          --build-version "1.0.${{ github.run_number }}" \
          --verbose
          
    - name: Sign APK (Optional)
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ ! -z "$KEYSTORE_PASSWORD" ]; then
          echo "Signing APK with keystore..."
          # Create keystore from base64 secret
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app-keystore.jks
          
          # Sign the APK
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore app-keystore.jks \
            -storepass "$KEYSTORE_PASSWORD" \
            -keypass "$KEY_PASSWORD" \
            build/app/outputs/flutter-apk/app-release-unsigned.apk \
            "$KEY_ALIAS"
            
          # Align the APK
          zipalign -v 4 build/app/outputs/flutter-apk/app-release-unsigned.apk \
            build/app/outputs/flutter-apk/app-release-signed.apk
        else
          echo "No keystore secrets found, skipping APK signing"
        fi
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: port-planner-apk-${{ github.run_number }}
        path: |
          build/app/outputs/flutter-apk/*.apk
          dist/*.apk
        retention-days: 30
        
    - name: Create Release
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/app/outputs/flutter-apk/*.apk
          dist/*.apk
        generate_release_notes: true
        name: Multi-Berth Port Planner v${{ github.ref_name }}
        body: |
          ## Multi-Berth Port Ship Service Planning System
          
          **Version:** ${{ github.ref_name }}
          **Build:** ${{ github.run_number }}
          **Author:** Eng. Aseel Omar Ali Ahmed Qasem
          
          ### Features:
          - ⚓ Multi-berth port configuration
          - 🚢 Detailed ship scheduling with arrival time
          - 📦 Container management (up to 5000 containers per ship)
          - 🏗️ Crane capacity optimization
          - 📊 Visual timeline and scheduling results
          - 📱 Mobile-friendly interface
          
          ### Installation:
          1. Download the APK file below
          2. Enable "Install from Unknown Sources" on your Android device
          3. Install the APK file
          4. Launch the Port Planner app
          
          ### Technical Details:
          - Built with Flet framework
          - Python-based backend
          - Flutter-based mobile interface
          - Optimized scheduling algorithms
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  build-info:
    runs-on: ubuntu-latest
    needs: build-apk
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| APK Build | ${{ needs.build-apk.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Number | ${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download APK" >> $GITHUB_STEP_SUMMARY
        echo "The built APK can be downloaded from the Artifacts section above." >> $GITHUB_STEP_SUMMARY
